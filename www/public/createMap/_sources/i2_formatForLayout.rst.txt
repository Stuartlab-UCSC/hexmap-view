
Prepare for Layout
==================

This describes utilities to transform your data into the format the layout
utility accepts.

Environment variables
---------------------

First, set some environment variables

For example with the cirm-01 server use::

 export HEXMAP=/data/hexmap/server
 export PYTHONPATH=$HEXMAP/calc:$HEXMAP/www/server
 DRL=$HEXMAP/packages/adam_novak-drl-graph-layout-c41341de8058/bin
 export PATH=$DRL:$PATH

A more general example where:

*HEX* is the server directory

*DDRL* is the bin directory of the DrL library
::

 export HEXMAP=HEX
 export PYTHONPATH=$HEXMAP/calc:$HEXMAP/www/server
 DRL=DDRL
 export PATH=$DRL:$PATH


compute_sparse_matrix.py
------------------------

This will convert your genomic matrix into a sparse matrix.

An example::

 python2.7 $HEXMAP/calc/compute_sparse_matrix.py \
   --in_file geneMatrix.tsv \
   --top 6 \
   --metric correlation \
   --output_type sparse \
   --out_file /Users/swat/data/layoutInput/QuakeBrain/similarity.tab \
   --log log \
   --num_jobs 0

Where:

**in_file**: one of your genomic matrix files

**top**: number of top neighbors to use in the sparse graph structure

**metric**: which metric to use; for continuous data like mRNA expression we use correlation

**output_type**: use sparse for the purpose of building a tumor map

**out_file**: the sparse matrix output file

**log**: log file

**num_jobs**: number of processors to use, where 0 means use half of them


remove_single_value_attributes.py
---------------------------------

This is optional and will remove any attribute columns that are empty or
where all the values are identical. This just makes finding useful attributes
easier in the viewer.

An example::

 python2.7 $HEXMAP/calc/remove_single_value_attributes.py \
    meta1_IDs_first.tab \
    meta2_diff_values.tab

Where:

*meta1_IDs_first.tab* is your attributes file

*meta2_diff_values.tab* is the output file


create_colormaps.py
-------------------

This will create colormaps from the categorical attributes in your attribute matrix.

An Example::

 python2.7 $HEXMAP/calc/create_colormaps.py \
    --in_attributes meta2_diff_values.tab \
    --out_file colormaps.tab

Where:

**in_attributes**: one of your attribute matrix files

**out_file**: the colormap generated for these attributes

Attributes are determined to be categorical if all values are integers
and not zero, one, or NaN.

If you want to assign something other than the default colors to a binary
attribute, edit two files after layout.py generates and puts them in
the view data directory:

    * make an entry for it in colormaps.tab
    * move its entry from the Binary list to the Categorical list in Layer_Data_Types.tab

Attributes with continuous values that happen to be all integers are incorrectly
colored like binary attributes, with a zero value color for any values other
than 1.
Note that a value like 3.0 is interpreted as an integer.
If this is a problem let us know so it moves up in the bug fix priorities.


convert_annotation_to_tumormap_mapping.py
-----------------------------------------

This will convert your attribute matrix into Tumor Map mappings (since Tumor
Map works from numeric mappings to color codes rather than raw attribute values).

An Example::

 python2.7 $HEXMAP/calc/convert_annotation_to_tumormap_mapping.py \
    --in_colormap colormaps.tab \
    --in_attributes meta2_diff_values.tab \
    --filter_attributes_flag TRUE \
    --output /Users/swat/data/layoutInput/QuakeBrain/attributes.tab

Where:

**in_colormap**: a colormap file generated by create_colormaps.py

**in_attributes**: an attributes file that was supplied to create_colormaps.py

**filter_attributes_flag**: if the attributes file has some attributes that are not a part of the colormaps file and this flag is TRUE, those will be filtered out; set this attribute to FALSE if you have some attributes in your attributes file that you want to keep but there's no color mapping (e.g. mutation attributes will often be like this since we generating a color mapping for binary attributes is not required)

**output**: the attributes file formatted for the layout utility

